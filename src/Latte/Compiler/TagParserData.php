<?php

/**
 * This file is part of the Latte (https://latte.nette.org)
 * Copyright (c) 2008 David Grudl (https://davidgrudl.com)
 */

declare(strict_types=1);

namespace Latte\Compiler;

use Latte\Compiler\Nodes\Php as Node;
use Latte\Compiler\Nodes\Php\Expression;
use Latte\Compiler\Nodes\Php\Scalar;


/** @internal generated trait used by TagParser */
abstract class TagParserData
{
	/** Symbol number of error recovery token */
	protected const ErrorSymbol = 1;

	/** Action number signifying default action */
	protected const DefaultAction = -8190;

	/** Rule number signifying that an unexpected token was encountered */
	protected const UnexpectedTokenRule = 8191;

	protected const Yy2Tblstate = 261;

	/** Number of non-leaf states */
	protected const NumNonLeafStates = 356;

	/** Map of lexer tokens to internal symbols */
	protected const TokenToSymbol = [
		0,     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   47,    109,   114,   110,   46,    114,   114,
		102,   103,   44,    42,    2,     43,    38,    45,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   22,    107,
		34,    7,     36,    21,    58,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   60,    114,   108,   26,    114,   114,   100,   114,   114,
		114,   98,    101,   114,   114,   114,   114,   114,   114,   99,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   104,   106,   105,   49,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   1,     3,     4,     5,
		6,     8,     9,     10,    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,    23,    24,    25,    27,    28,    29,
		30,    31,    32,    33,    35,    37,    39,    40,    41,    48,    50,    51,    52,    53,    54,    55,    56,    57,    59,    61,
		62,    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
		82,    83,    84,    85,    86,    87,    88,    89,    111,   90,    91,    92,    93,    112,   113,   94,    95,    96,    97,
	];

	/** Map of states to a displacement into the self::Action table. The corresponding action for this
	 *  state/symbol pair is self::Action[self::ActionBase[$state] + $symbol]. If self::ActionBase[$state] is 0, the
	 *  action is defaulted, i.e. self::ActionDefault[$state] should be used instead. */
	protected const ActionBase = [
		317,   363,   363,   363,   363,   98,    151,   363,   310,   204,   257,   363,   442,   442,   442,   442,   442,   240,   240,   240,
		240,   333,   333,   303,   328,   402,   403,   407,   408,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,
		-42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,
		-42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,
		-42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,
		-42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   304,   295,   297,   410,   420,   419,   422,   437,   438,   436,
		441,   457,   52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    216,   35,    352,   -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    349,   349,   349,
		322,   41,    179,   448,   -41,   109,   109,   548,   548,   548,   548,   548,   483,   483,   81,    81,    81,    81,    536,   536,
		39,    39,    39,    39,    39,    39,    39,    39,    39,    218,   49,    49,    318,   121,   56,    56,    56,    12,    12,    12,
		12,    12,    215,   205,   205,   205,   154,   210,   260,   334,   129,   129,   129,   129,   129,   129,   336,   325,   313,   316,
		316,   391,   230,   230,   316,   47,    123,   -46,   62,    87,    229,   299,   300,   220,   185,   409,   286,   294,   329,   26,
		26,    399,   240,   456,   456,   100,   240,   240,   240,   100,   175,   175,   175,   -31,   -28,   238,   273,   423,   273,   273,
		273,   32,    184,   -70,   376,   374,   375,   127,   159,   149,   377,   379,   376,   376,   178,   149,   149,   332,   342,   341,
		196,   155,   341,   324,   324,   193,   72,    382,   380,   383,   373,   372,   429,   214,   239,   338,   330,   350,   284,   382,
		380,   383,   326,   17,    347,   285,   285,   285,   285,   285,   285,   285,   285,   285,   285,   214,   335,   107,   340,   387,
		389,   31,    393,   394,   388,   305,   431,   285,   339,   346,   321,   386,   348,   34,    214,   439,   327,   323,   421,   337,
		392,   309,   446,   397,   331,   433,   249,   390,   268,   434,   280,   430,   256,   398,   428,   435,   0,     -42,   -42,   -42,
		-42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,   -42,
		-42,   -42,   -42,   -42,   -42,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     52,    52,    52,    52,    52,    52,    52,    52,
		52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    0,
		483,   52,    52,    52,    52,    52,    52,    52,    0,     0,     205,   205,   205,   205,   97,    97,    97,    97,    97,    97,
		97,    97,    97,    97,    97,    205,   97,    97,    97,    97,    97,    97,    97,    97,    97,    97,    97,    97,    0,     0,
		0,     0,     0,     0,     0,     123,   324,   324,   324,   324,   324,   324,   123,   123,   0,     0,     0,     0,     205,   205,
		0,     0,     0,     123,   324,   0,     0,     0,     0,     0,     0,     240,   240,   240,   123,   0,     0,     100,   0,     324,
		324,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     285,   107,   285,   285,   285,
	];

	/** Table of actions. Indexed according to self::ActionBase comment. */
	protected const Action = [
		34,    35,    -8190, -8190, -8190, 36,    32,    37,    180,   181,   38,    39,    40,    41,    42,    43,    44,    -50,   1,     194,
		45,    558,   559,   206,   -8190, 540,   383,   383,   12,    556,   287,   -48,   246,   247,   -47,   523,   288,   289,   -8190, -8190,
		567,   290,   291,   209,   -8190, -8190, -8190, -78,   13,    -78,   542,   541,   564,   562,   563,   55,    56,    57,    -183,  198,
		46,    -182,  -8190, 99,    -8190, -8190, -8190, 226,   292,   292,   197,   -183,  0,     24,    -182,  58,    59,    60,    61,    62,
		63,    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,    1,
		196,   364,   365,   363,   254,   341,   420,   383,   419,   7,     556,   82,    -8190, -8190, -8190, -8191, -8191, -8191, -8191, 73,
		74,    75,    76,    291,   383,   362,   361,   642,   14,    11,    -8190, 643,   -8190, -8190, -8190, -8190, -8190, -8190, 199,   374,
		-8190, 50,    197,   420,   -78,   419,   368,   -221,  226,   292,   -78,   15,    -52,   -78,   364,   365,   363,   22,    51,    195,
		47,    102,   538,   202,   540,   298,   292,   -221,  -221,  -221,  299,   370,   236,   237,   369,   375,   300,   301,   362,   361,
		192,   418,   -8190, -8190, -8190, -268,  16,    -268,  25,    542,   541,   383,   374,   631,   381,   235,   382,   172,   385,   368,
		-8190, 429,   -8190, -8190, -8190, -8190, 173,   364,   365,   363,   23,    184,   195,   47,    -222,  420,   202,   419,   298,   -8190,
		-266,  96,    -266,  299,   370,   236,   237,   369,   375,   300,   301,   362,   361,   100,   -222,  -222,  -222,  -22,   -47,   292,
		381,   26,    382,   -182,  179,   374,   97,    77,    78,    79,    80,    81,    368,   196,   429,   106,   -182,  74,    75,    76,
		364,   365,   363,   109,   82,    195,   47,    362,   361,   202,   -218,  298,   -8190, -8190, 107,   -222,  299,   370,   236,   237,
		369,   375,   300,   301,   362,   361,   108,   447,   -268,  30,    -218,  -218,  -218,  -268,  27,    -222,  -222,  -222,  374,   -218,
		-264,  18,    -264,  20,    -182,  368,   -23,   429,   -17,   210,   211,   212,   -225,  364,   365,   363,   -16,   -182,  195,   47,
		-217,  196,   202,   -266,  298,   -8190, -8190, -8190, -266,  299,   370,   236,   237,   369,   375,   300,   301,   362,   361,   197,
		-217,  -217,  -217,  -8190, 82,    -8190, -8190, 28,    19,    -217,  98,    374,   -8190, -8190, -8190, -8190, -8190, -8190, 368,   228,
		429,   105,   -224,  193,   201,   103,   364,   365,   363,   324,   -8190, 195,   47,    -219,  104,   202,   -216,  298,   644,   250,
		251,   252,   299,   370,   236,   237,   369,   375,   300,   301,   362,   361,   383,   -219,  -219,  -219,  -216,  -216,  -216,  -8190,
		101,   172,   -219,  -264,  374,   -216,  280,   208,   -264,  347,   173,   368,   420,   429,   419,   33,    245,   3,     178,   -191,
		568,   -29,   569,   -251,  195,   47,    277,   164,   202,   243,   298,   21,    393,   -250,  557,   299,   370,   236,   237,   369,
		375,   300,   301,   553,   0,     364,   365,   363,   -249,  -225,  -224,  31,    -223,  48,    49,    17,    83,    84,    85,    86,
		87,    88,    89,    90,    91,    92,    93,    94,    95,    362,   361,   213,   214,   215,   2,     4,     5,     6,     8,     9,
		244,   10,    29,    374,   52,    53,    364,   365,   363,   190,   368,   191,   242,   639,   583,   279,   511,   554,   469,   471,
		430,   526,   506,   195,   47,    532,   534,   202,   -216,  298,   536,   586,   -29,   332,   299,   370,   236,   237,   369,   375,
		300,   301,   336,   545,   374,   512,   611,   200,   -216,  -216,  -216,  368,   101,   54,    263,   355,   641,   -216,  394,   640,
		522,   344,   638,   595,   367,   366,   609,   599,   378,   0,     379,   -8190, -8190, -8190, 634,   371,   370,   373,   372,   369,
		375,   376,   377,   362,   361,   349,   292,   0,     0,     -8190, 0,     -8190, -8190, -8190, -8190, -8190, -8190, -8191, -8191, -8191,
		-8191, -8191, 0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
		0,     254,   0,     0,     383,   0,     0,     556,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     290,
		291,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     50,    0,
		0,     0,     0,     0,     0,     226,   292,
	];

	/** Table indexed analogously to self::Action. If self::ActionCheck[self::ActionBase[$state] + $symbol] != $symbol
	 *  then the action is defaulted, i.e. self::ActionDefault[$state] should be used instead. */
	protected const ActionCheck = [
		42,    43,    3,     4,     5,     47,    76,    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,    0,     60,    61,
		62,    63,    64,    65,    70,    67,    68,    68,    2,     71,    72,    0,     74,    75,    0,     105,   78,    79,    3,     4,
		86,    83,    84,    85,    3,     4,     5,     0,     22,    2,     92,    93,    94,    95,    96,    3,     4,     5,     89,    27,
		102,   89,    21,    104,   23,    24,    25,    109,   110,   110,   21,    102,   0,     21,    102,   23,    24,    25,    26,    27,
		28,    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,    60,
		48,    3,     4,     5,     65,    43,    94,    68,    96,    2,     71,    59,    3,     4,     5,     34,    35,    36,    37,    38,
		39,    40,    41,    84,    68,    27,    28,    65,    102,   2,     21,    69,    23,    24,    25,    26,    27,    28,    106,   41,
		84,    102,   21,    94,    97,    96,    48,    60,    109,   110,   103,   2,     103,   106,   3,     4,     5,     2,     102,   61,
		62,    2,     65,    65,    67,    67,    110,   80,    81,    82,    72,    73,    74,    75,    76,    77,    78,    79,    27,    28,
		2,     84,    3,     4,     5,     0,     2,     2,     90,    92,    93,    68,    41,    70,    65,    2,     67,    97,    2,     48,
		21,    103,   23,    24,    25,    26,    106,   3,     4,     5,     87,    88,    61,    62,    60,    94,    65,    96,    67,    3,
		0,     7,     2,     72,    73,    74,    75,    76,    77,    78,    79,    27,    28,    104,   80,    81,    82,    22,    0,     110,
		65,    90,    67,    89,    6,     41,    7,     42,    43,    44,    45,    46,    48,    48,    103,   6,     102,   39,    40,    41,
		3,     4,     5,     7,     59,    61,    62,    27,    28,    65,    60,    67,    42,    43,    6,     60,    72,    73,    74,    75,
		76,    77,    78,    79,    27,    28,    6,     103,   103,   60,    80,    81,    82,    108,   90,    80,    81,    82,    41,    89,
		0,     6,     2,     6,     89,    48,    22,    103,   22,    80,    81,    82,    102,   3,     4,     5,     22,    102,   61,    62,
		60,    48,    65,    103,   67,    3,     4,     5,     108,   72,    73,    74,    75,    76,    77,    78,    79,    27,    28,    21,
		80,    81,    82,    21,    59,    23,    24,    90,    22,    89,    22,    41,    3,     4,     5,     3,     4,     5,     48,    60,
		103,   22,    102,   22,    27,    60,    3,     4,     5,     66,    21,    61,    62,    60,    22,    65,    60,    67,    69,    80,
		81,    82,    72,    73,    74,    75,    76,    77,    78,    79,    27,    28,    68,    80,    81,    82,    80,    81,    82,    70,
		90,    97,    89,    103,   41,    89,    73,    103,   108,   77,    106,   48,    94,    103,   96,    98,    99,    100,   101,   89,
		86,    103,   86,    102,   61,    62,    103,   89,    65,    89,    67,    104,   90,    102,   109,   72,    73,    74,    75,    76,
		77,    78,    79,    108,   -1,    3,     4,     5,     102,   102,   102,   60,    102,   90,    91,    7,     8,     9,     10,    11,
		12,    13,    14,    15,    16,    17,    18,    19,    20,    27,    28,    80,    81,    82,    102,   102,   102,   102,   102,   102,
		89,    102,   102,   41,    102,   102,   3,     4,     5,     102,   48,    102,   102,   105,   108,   103,   103,   103,   50,    51,
		103,   103,   103,   61,    62,    103,   103,   65,    60,    67,    103,   103,   103,   103,   72,    73,    74,    75,    76,    77,
		78,    79,    103,   103,   41,    103,   103,   106,   80,    81,    82,    48,    90,    104,   104,   107,   105,   89,    105,   105,
		105,   105,   105,   105,   61,    62,    105,   108,   65,    -1,    67,    3,     4,     5,     108,   72,    73,    74,    75,    76,
		77,    78,    79,    27,    28,    108,   110,   -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
		32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
		-1,    65,    -1,    -1,    68,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,
		84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    102,   -1,
		-1,    -1,    -1,    -1,    -1,    109,   110,
	];

	/** Map of states to their default action */
	protected const ActionDefault = [
		8191,  262,   262,   31,    262,   8191,  8191,  262,   8191,  8191,  8191,  29,    8191,  8191,  8191,  29,    8191,  8191,  8191,  8191,
		8191,  39,    29,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  214,   214,   214,   8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  10,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  29,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  263,   263,   8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  1,     269,   270,   83,    77,    215,   265,   267,   79,    82,    80,    43,    44,    56,    119,   121,   153,   120,
		95,    100,   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,   93,    94,    165,   154,   152,   151,
		117,   118,   124,   92,    8191,  122,   123,   141,   142,   139,   140,   143,   8191,  8191,  144,   145,   146,   147,   8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  125,   69,    69,    69,    8191,  8191,  11,    8191,  8191,  8191,  8191,
		8191,  8191,  205,   131,   132,   134,   205,   204,   149,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  210,   114,
		116,   188,   126,   127,   96,    216,   8191,  8191,  8191,  209,   8191,  277,   216,   216,   216,   34,    34,    34,    8191,  88,
		88,    8191,  34,    8191,  8191,  8191,  34,    34,    34,    2,     8191,  8191,  8191,  194,   222,   216,   137,   8191,  128,   129,
		130,   57,    8191,  8191,  192,   181,   8191,  28,    28,    28,    8191,  235,   236,   237,   28,    28,    28,    169,   36,    71,
		28,    28,    71,    8191,  8191,  28,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  199,   8191,  220,   233,   184,   15,
		20,    21,    8191,  199,   218,   135,   136,   138,   157,   158,   159,   160,   161,   162,   163,   260,   8191,  256,   187,   8191,
		8191,  216,   8191,  8191,  276,   8191,  216,   133,   8191,  195,   240,   8191,  217,   216,   261,   8191,  8191,  8191,  59,    60,
		8191,  8191,  8191,  8191,  196,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  55,    8191,  8191,  8191,
	];

	/** Map of non-terminals to a displacement into the self::Goto table. The corresponding goto state for this
	 *  non-terminal/state pair is self::Goto[self::GotoBase[$nonTerminal] + $state] (unless defaulted) */
	protected const GotoBase = [
		0,     0,     -1,    40,    0,     0,     108,   0,     226,   24,    22,    -34,   0,     266,   20,    0,     0,     0,     0,     120,
		203,   57,    -13,   251,   -2,    52,    0,     53,    0,     61,    -77,   0,     0,     -61,   6,     -258,  104,   -11,   0,     29,
		41,    0,     63,    0,     0,     248,   0,     0,     0,     42,    0,     0,     0,     0,     69,    -44,   0,     0,     16,    27,
		7,     38,    46,    -68,   0,     0,     -51,   -24,   0,     39,    110,   4,     35,    0,     0,
	];

	/** Table of states to goto after reduction. Indexed according to self::GotoBase comment. */
	protected const Goto = [
		112,   112,   111,   112,   432,   432,   112,   531,   533,   323,   111,   613,   535,   585,   587,   588,   140,   128,   129,   128,
		125,   125,   117,   138,   130,   130,   130,   130,   125,   127,   127,   127,   122,   305,   306,   256,   307,   308,   309,   310,
		311,   312,   313,   314,   455,   110,   455,   123,   124,   113,   114,   115,   116,   118,   136,   137,   139,   157,   160,   161,
		162,   165,   166,   167,   168,   169,   170,   171,   174,   175,   176,   177,   189,   203,   204,   205,   222,   223,   258,   259,
		260,   327,   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,   158,   119,   120,
		130,   131,   121,   159,   132,   133,   156,   134,   135,   182,   182,   182,   182,   330,   257,   182,   275,   276,   262,   182,
		414,   423,   421,   422,   424,   185,   187,   188,   187,   417,   417,   417,   417,   537,   537,   537,   417,   417,   417,   417,
		417,   227,   398,   598,   598,   598,   539,   539,   539,   539,   539,   539,   539,   539,   539,   539,   539,   539,   238,   610,
		610,   610,   610,   610,   610,   255,   333,   219,   220,   232,   321,   326,   224,   225,   233,   234,   303,   303,   555,   555,
		555,   555,   555,   555,   555,   555,   555,   272,   273,   600,   601,   602,   596,   596,   577,   577,   577,   577,   577,   577,
		577,   577,   577,   577,   577,   575,   575,   575,   575,   575,   575,   575,   575,   575,   575,   575,   304,   304,   304,   304,
		304,   304,   304,   304,   304,   304,   304,   302,   302,   302,   302,   231,   322,   302,   437,   343,   402,   302,   231,   231,
		407,   446,   445,   340,   629,   410,   350,   396,   231,   231,   645,   527,   315,   315,   428,   315,   319,   320,   315,   504,
		231,   629,   630,   318,   318,   318,   319,   320,   278,   388,   441,   334,   217,   630,   635,   636,   637,   389,   441,   335,
		354,   442,   603,   604,   528,   249,   183,   183,   351,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     352,   530,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     391,   391,   391,   0,     0,     0,     0,     391,   0,     0,     0,     391,   391,   391,   0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     329,   0,     0,     0,     0,     0,     0,     0,     239,   240,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     405,   405,
	];

	/** Table indexed analogously to self::Goto. If self::GotoCheck[self::GotoBase[$nonTerminal] + $state] != $nonTerminal
	 *  then the goto state is defaulted, i.e. self::GotoDefault[$nonTerminal] should be used. */
	protected const GotoCheck = [
		2,     2,     2,     2,     37,    37,    2,     35,    35,    60,    2,     71,    35,    35,    35,    35,    2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     6,     6,     6,     6,     66,    70,    6,     36,    36,    36,    6,
		30,    30,    30,    30,    30,    6,     6,     6,     6,     33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
		33,    63,    19,    66,    66,    66,    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,    63,    66,
		66,    66,    66,    66,    66,    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,    24,    24,    24,    24,
		24,    24,    24,    24,    24,    24,    24,    67,    67,    67,    67,    67,    66,    66,    58,    58,    58,    58,    58,    58,
		58,    58,    58,    58,    58,    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,    61,    61,    61,    61,
		61,    61,    61,    61,    61,    61,    61,    8,     8,     8,     8,     10,    20,    8,     11,    11,    21,    8,     10,    10,
		11,    11,    11,    25,    72,    27,    11,    11,    10,    10,    10,    11,    23,    23,    29,    23,    14,    14,    23,    42,
		10,    72,    72,    54,    54,    54,    14,    14,    14,    13,    39,    23,    62,    72,    9,     9,     9,     13,    39,    45,
		45,    40,    69,    69,    49,    3,     6,     6,     34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    10,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    6,     6,     6,     -1,    -1,    -1,    -1,    6,     -1,    -1,    -1,    6,     6,     6,     -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    8,     -1,    -1,    -1,    -1,    -1,    -1,    -1,    8,     8,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    23,
	];

	/** Map of non-terminals to the default state to goto after their reduction */
	protected const GotoDefault = [
		-8192, 286,   126,   241,   359,   360,   186,   380,   328,   608,   594,   386,   267,   615,   284,   283,   454,   345,   281,   397,
		346,   401,   163,   293,   294,   337,   274,   409,   248,   426,   261,   338,   339,   265,   348,   549,   269,   431,   268,   440,
		443,   453,   264,   520,   282,   331,   524,   353,   285,   529,   584,   266,   295,   270,   546,   253,   221,   296,   229,   218,
		316,   207,   216,   628,   230,   297,   582,   271,   590,   597,   317,   614,   627,   325,   342,
	];

	/** Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for
	 *  determining the state to goto after reduction. */
	protected const RuleToNonTerminal = [
		0,     1,     1,     1,     1,     6,     6,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
		7,     7,     8,     8,     8,     9,     9,     10,    11,    11,    4,     4,     12,    12,    14,    14,    15,    15,    16,    17,
		17,    18,    18,    19,    19,    5,     5,     21,    21,    21,    21,    25,    25,    26,    26,    27,    27,    29,    29,    29,
		29,    30,    30,    30,    30,    31,    31,    32,    32,    28,    28,    34,    34,    35,    35,    36,    36,    37,    37,    37,
		37,    20,    38,    38,    3,     3,     39,    39,    40,    40,    40,    40,    2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     41,    44,    44,    47,    48,    48,    49,    50,    50,    50,    50,    50,
		50,    54,    33,    33,    55,    55,    55,    42,    42,    42,    52,    52,    46,    46,    58,    59,    59,    24,    61,    61,
		61,    61,    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,    45,    45,    57,    57,    57,    57,
		64,    64,    64,    51,    51,    51,    65,    65,    65,    65,    65,    65,    65,    22,    22,    22,    22,    22,    66,    66,
		69,    68,    56,    56,    56,    56,    56,    56,    56,    53,    53,    53,    67,    67,    67,    23,    60,    70,    70,    71,
		71,    71,    71,    13,    13,    13,    13,    13,    13,    13,    13,    62,    62,    62,    62,    63,    73,    72,    72,    72,
		72,    72,    72,    72,    72,    72,    74,    74,    74,    74,
	];

	/** Map of rules to the length of their right-hand side, which is the number of elements that have to
	 *  be popped from the stack(s) on reduction. */
	protected const RuleToLength = [
		1,     2,     2,     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
		1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     2,     0,     1,     3,     0,     1,     0,     1,     7,     0,
		2,     1,     3,     3,     4,     1,     3,     1,     2,     1,     1,     2,     0,     1,     3,     4,     6,     1,     2,     1,
		1,     1,     1,     1,     1,     3,     3,     3,     3,     0,     1,     0,     2,     2,     4,     1,     3,     1,     2,     2,
		3,     2,     3,     1,     1,     2,     3,     3,     0,     3,     3,     3,     1,     3,     3,     3,     4,     1,     1,     2,
		3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,     2,     2,     3,     3,     3,
		3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,     2,     2,     3,
		3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     4,     5,     4,     3,     3,     4,     4,     2,     2,     2,
		2,     2,     2,     2,     1,     8,     12,    9,     3,     0,     4,     2,     1,     3,     2,     2,     4,     2,     4,     4,
		6,     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,     1,     0,     1,     1,     3,     5,     3,     4,     1,
		1,     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,     2,     3,     0,     1,     1,     3,     1,     1,
		1,     1,     1,     1,     3,     1,     1,     4,     1,     4,     6,     4,     4,     1,     1,     3,     3,     3,     1,     4,
		1,     3,     1,     4,     3,     3,     3,     3,     3,     1,     3,     1,     1,     3,     1,     4,     1,     3,     1,     1,
		1,     3,     0,     1,     2,     3,     4,     3,     4,     2,     2,     2,     2,     1,     2,     1,     1,     1,     4,     3,
		3,     3,     3,     3,     6,     3,     1,     1,     2,     1,
	];

	/** Map of symbols to their names */
	protected const SymbolToName = [
		'end',
		'error',
		"','",
		"'or'",
		"'xor'",
		"'and'",
		"'=>'",
		"'='",
		"'+='",
		"'-='",
		"'*='",
		"'/='",
		"'.='",
		"'%='",
		"'&='",
		"'|='",
		"'^='",
		"'<<='",
		"'>>='",
		"'**='",
		"'??='",
		"'?'",
		"':'",
		"'??'",
		"'||'",
		"'&&'",
		"'^'",
		"'&'",
		"'&'",
		"'=='",
		"'!='",
		"'==='",
		"'!=='",
		"'<=>'",
		"'<'",
		"'<='",
		"'>'",
		"'>='",
		"'.'",
		"'<<'",
		"'>>'",
		"'in'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'instanceof'",
		"'~'",
		"'++'",
		"'--'",
		"'(int)'",
		"'(float'",
		"'(string)'",
		"'(array)'",
		"'(object)'",
		"'(bool)'",
		"'@'",
		"'**'",
		"'['",
		"'new'",
		"'clone'",
		'integer',
		'floating-point number',
		'identifier',
		'variable name',
		'constant',
		'variable',
		'number',
		'string content',
		'quoted string',
		"'match'",
		"'default'",
		"'function'",
		"'fn'",
		"'return'",
		"'use'",
		"'isset'",
		"'empty'",
		"'->'",
		"'?->'",
		"'??->'",
		"'list'",
		"'array'",
		"'heredoc start'",
		"'heredoc end'",
		"'\${'",
		"'{\$'",
		"'::'",
		"'...'",
		"'(expand)'",
		'fully qualified name',
		'namespaced name',
		"'null'",
		"'true'",
		"'false'",
		"'?|'",
		"'e'",
		"'m'",
		"'a'",
		"'f'",
		"'('",
		"')'",
		"'{'",
		"'}'",
		"'|'",
		"';'",
		"']'",
		"'\"'",
		"'$'",
		"'\\\\'",
		'whitespace',
		'comment',
	];

	/** Temporary value containing the result of last semantic action (reduction) */
	protected mixed $semValue = null;

	/** Semantic value stack (contains values of tokens and semantic action results) */
	protected array $semStack;

	/** @var Token[] Start attribute stack */
	protected array $startTokenStack;


	protected function reduce(int $rule, int $pos): void
	{
		(match ($rule) {
			0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 57, 70, 72, 92, 97, 98, 164, 181, 183, 187, 188, 190, 191, 193, 204, 209, 210, 215, 216, 218, 219, 220, 221, 223, 225, 226, 228, 233, 234, 238, 242, 249, 251, 252, 254, 259, 277, 289 => fn() => $this->semValue = $this->semStack[$pos],
			2 => fn() => $this->semValue = new Node\ModifierNode($this->semStack[$pos], position: $this->startTokenStack[$pos]->position),
			3 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos], position: $this->startTokenStack[$pos]->position),
			22, 23, 24, 25, 26, 62, 63, 64 => fn() => $this->semValue = new Node\IdentifierNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			27 => fn() => $this->semValue = new Expression\VariableNode(substr($this->semStack[$pos], 1), $this->startTokenStack[$pos]->position),
			30, 40, 51, 81, 89, 90, 91, 149, 170, 171, 189, 217, 224, 250, 253, 285 => fn() => $this->semValue = $this->semStack[$pos - 1],
			31, 39, 52, 73, 88, 169, 192 => fn() => $this->semValue = [],
			32, 41, 53, 75, 83, 84, 172, 258, 273 => fn() => $this->semValue = [$this->semStack[$pos]],
			33, 42, 54, 66, 68, 76, 82, 173, 257 => function () use ($pos) {
				$this->semStack[$pos - 2][] = $this->semStack[$pos];
				$this->semValue = $this->semStack[$pos - 2];
			},
			34, 36 => fn() => $this->semValue = false,
			35, 37 => fn() => $this->semValue = true,
			38 => fn() => $this->semValue = new Expression\MatchNode($this->semStack[$pos - 4], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 6]->position),
			43 => fn() => $this->semValue = new Node\MatchArmNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			44 => fn() => $this->semValue = new Node\MatchArmNode(null, $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			45 => fn() => $this->semValue = [null, ...$this->semStack[$pos]],
			46 => fn() => $this->semValue = [$this->semStack[$pos - 2], ...$this->semStack[$pos]],
			47, 49 => fn() => $this->semValue = [$this->semStack[$pos], false],
			48 => fn() => $this->semValue = [$this->semStack[$pos], true],
			50 => fn() => $this->semValue = [$this->convertArrayToList($this->semStack[$pos]), false],
			55 => fn() => $this->semValue = new Node\ParameterNode($this->semStack[$pos], null, $this->semStack[$pos - 3], $this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			56 => fn() => $this->semValue = new Node\ParameterNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->semStack[$pos - 5], $this->semStack[$pos - 4], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			58 => fn() => $this->semValue = new Node\NullableTypeNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			59 => fn() => $this->semValue = new Node\UnionTypeNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			60 => fn() => $this->semValue = new Node\IntersectionTypeNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			61 => fn() => $this->semValue = TagParser::handleBuiltinTypes($this->semStack[$pos]),
			65, 67 => fn() => $this->semValue = [$this->semStack[$pos - 2], $this->semStack[$pos]],
			69, 71, 214 => fn() => $this->semValue = null,
			74 => fn() => $this->semValue = $this->semStack[$pos - 2],
			77 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, false, null, $this->startTokenStack[$pos]->position),
			78 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], true, false, null, $this->startTokenStack[$pos - 1]->position),
			79 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, true, null, $this->startTokenStack[$pos - 1]->position),
			80 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, false, $this->semStack[$pos - 2], $this->startTokenStack[$pos - 2]->position),
			85, 271, 272 => function () use ($pos) {
				$this->semStack[$pos - 1][] = $this->semStack[$pos];
				$this->semValue = $this->semStack[$pos - 1];
			},
			86 => fn() => $this->semValue = new Node\FilterNode($this->semStack[$pos - 1], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			87 => fn() => $this->semValue = new Node\FilterNode($this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			93, 95 => fn() => $this->semValue = new Expression\AssignNode($this->semStack[$pos - 2], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			94 => fn() => $this->semValue = new Expression\AssignNode($this->convertArrayToList($this->semStack[$pos - 2]), $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			96 => fn() => $this->semValue = new Expression\AssignNode($this->semStack[$pos - 3], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			99 => fn() => $this->semValue = new Expression\CloneNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			100 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '+', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			101 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '-', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			102 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '*', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			103 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '/', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			104 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '.', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			105 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '%', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			106 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			107 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '|', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			108 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '^', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			109 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '<<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			110 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '>>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			111 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '**', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			112 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '??', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			113 => fn() => $this->semValue = new Expression\PostOpNode($this->semStack[$pos - 1], '++', $this->startTokenStack[$pos - 1]->position),
			114 => fn() => $this->semValue = new Expression\PreOpNode($this->semStack[$pos], '++', $this->startTokenStack[$pos - 1]->position),
			115 => fn() => $this->semValue = new Expression\PostOpNode($this->semStack[$pos - 1], '--', $this->startTokenStack[$pos - 1]->position),
			116 => fn() => $this->semValue = new Expression\PreOpNode($this->semStack[$pos], '--', $this->startTokenStack[$pos - 1]->position),
			117 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '||', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			118 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '&&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			119 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'or', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			120 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'and', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			121 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'xor', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			122, 123 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			124 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '^', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			125 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '.', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			126 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '+', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			127 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '-', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			128 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '*', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			129 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '/', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			130 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '%', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			131 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			132 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			133 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '**', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			134 => fn() => $this->semValue = new Expression\InNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			135 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '+', $this->startTokenStack[$pos - 1]->position),
			136 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '-', $this->startTokenStack[$pos - 1]->position),
			137 => fn() => $this->semValue = new Expression\NotNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			138 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '~', $this->startTokenStack[$pos - 1]->position),
			139 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '===', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			140 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '!==', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			141 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '==', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			142 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '!=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			143 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<=>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			144 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			145 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			146 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			147 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			148 => fn() => $this->semValue = new Expression\InstanceofNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			150 => fn() => $this->semValue = new Expression\FiltersCallNode($this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			151 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 4], $this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 4]->position),
			152 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 3], null, $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			153 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 2], $this->semStack[$pos], null, $this->startTokenStack[$pos - 2]->position),
			154 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '??', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			155 => fn() => $this->semValue = new Expression\IssetNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			156 => fn() => $this->semValue = new Expression\EmptyNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			157 => fn() => $this->semValue = new Expression\CastNode('int', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			158 => fn() => $this->semValue = new Expression\CastNode('float', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			159 => fn() => $this->semValue = new Expression\CastNode('string', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			160 => fn() => $this->semValue = new Expression\CastNode('array', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			161 => fn() => $this->semValue = new Expression\CastNode('object', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			162 => fn() => $this->semValue = new Expression\CastNode('bool', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			163 => fn() => $this->semValue = new Expression\ErrorSuppressNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			165 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 6], $this->semStack[$pos - 4], [], $this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 7]->position),
			166 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 10], $this->semStack[$pos - 8], $this->semStack[$pos - 6], $this->semStack[$pos - 5], $this->semStack[$pos - 2], $this->startTokenStack[$pos - 11]->position),
			167 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 7], $this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->semStack[$pos - 2], null, $this->startTokenStack[$pos - 8]->position),
			168 => fn() => $this->semValue = new Expression\NewNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			174 => fn() => $this->semValue = new Node\ClosureUseNode($this->semStack[$pos], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 1]->position),
			175, 177 => fn() => $this->semValue = $this->checkFunctionName(new Expression\FunctionCallNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position)),
			176, 178 => fn() => $this->semValue = $this->checkFunctionName(new Expression\FunctionCallableNode($this->semStack[$pos - 3], $this->startTokenStack[$pos - 3]->position)),
			179 => fn() => $this->semValue = new Expression\StaticMethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			180 => fn() => $this->semValue = new Expression\StaticMethodCallableNode($this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			182, 184, 185 => fn() => $this->semValue = new Node\NameNode($this->semStack[$pos], Node\NameNode::KindNormal, $this->startTokenStack[$pos]->position),
			186 => fn() => $this->semValue = new Node\NameNode($this->semStack[$pos], Node\NameNode::KindFullyQualified, $this->startTokenStack[$pos]->position),
			194 => fn() => $this->semValue = new Expression\ConstantFetchNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			195 => fn() => $this->semValue = new Expression\ClassConstantFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			196 => fn() => $this->semValue = new Expression\ClassConstantFetchNode($this->semStack[$pos - 4], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 4]->position),
			197 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			198 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			199 => function () use ($pos) {
				$this->semValue = $this->semStack[$pos];
				$this->shortArrays->attach($this->semValue);
			},
			200 => fn() => $this->semValue = Scalar\StringNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			201 => fn() => $this->semValue = Scalar\InterpolatedStringNode::parse($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			202 => fn() => $this->semValue = Scalar\IntegerNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			203 => fn() => $this->semValue = Scalar\FloatNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			205, 286 => fn() => $this->semValue = new Scalar\StringNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			206 => fn() => $this->semValue = new Scalar\BooleanNode(true, $this->startTokenStack[$pos]->position),
			207 => fn() => $this->semValue = new Scalar\BooleanNode(false, $this->startTokenStack[$pos]->position),
			208 => fn() => $this->semValue = new Scalar\NullNode($this->startTokenStack[$pos]->position),
			211 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 2], [$this->semStack[$pos - 1]], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position, $this->startTokenStack[$pos]->position),
			212 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 1], [], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position, $this->startTokenStack[$pos]->position),
			213 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position, $this->startTokenStack[$pos]->position),
			222 => fn() => $this->semValue = new Expression\ConstantFetchNode(new Node\NameNode($this->semStack[$pos], Node\NameNode::KindNormal, $this->startTokenStack[$pos]->position), $this->startTokenStack[$pos]->position),
			227, 243, 278 => fn() => $this->semValue = new Expression\ArrayAccessNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			229 => fn() => $this->semValue = new Expression\MethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], false, $this->startTokenStack[$pos - 3]->position),
			230 => fn() => $this->semValue = new Expression\MethodCallableNode($this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			231 => fn() => $this->semValue = new Expression\MethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			232 => fn() => $this->semValue = new Expression\MethodCallNode(new Expression\BinaryOpNode($this->semStack[$pos - 3], '??', new Scalar\NullNode($this->startTokenStack[$pos - 3]->position), $this->startTokenStack[$pos - 3]->position), $this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			235, 244, 279 => fn() => $this->semValue = new Expression\PropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			236, 245, 280 => fn() => $this->semValue = new Expression\PropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			237, 246, 281 => fn() => $this->semValue = new Expression\PropertyFetchNode(new Expression\BinaryOpNode($this->semStack[$pos - 2], '??', new Scalar\NullNode($this->startTokenStack[$pos - 2]->position), $this->startTokenStack[$pos - 2]->position), $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			239 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			240 => function () use ($pos) {
				$var = $this->semStack[$pos]->name;
				$this->semValue = \is_string($var)
					? new Node\VarLikeIdentifierNode($var, $this->startTokenStack[$pos]->position)
					: $var;
			},
			241, 247, 248 => fn() => $this->semValue = new Expression\StaticPropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			255 => fn() => $this->semValue = $this->convertArrayToList(new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position)),
			256 => function () use ($pos) {
				$this->semValue = $this->semStack[$pos];
				$end = count($this->semValue) - 1;
				if (
					$this->semValue[$end]->value instanceof Expression\TemporaryNode
					&& !$this->semValue[$end]->value->value
				) {
					array_pop($this->semValue);
				}
			},
			260 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode($this->semStack[$pos], $this->startTokenStack[$pos]->position), null, false, false, $this->startTokenStack[$pos]->position),
			261 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode($this->semStack[$pos], $this->startTokenStack[$pos - 2]->position), $this->semStack[$pos - 2], false, false, $this->startTokenStack[$pos - 2]->position),
			262 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode(null), null, false, false, $this->startTokenStack[$pos]->position),
			263 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, false, false, $this->startTokenStack[$pos]->position),
			264 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, true, false, $this->startTokenStack[$pos - 1]->position),
			265, 267 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], $this->semStack[$pos - 2], false, false, $this->startTokenStack[$pos - 2]->position),
			266, 268 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], $this->semStack[$pos - 3], true, false, $this->startTokenStack[$pos - 3]->position),
			269, 270 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, false, true, $this->startTokenStack[$pos - 1]->position),
			274 => fn() => $this->semValue = [$this->semStack[$pos - 1], $this->semStack[$pos]],
			275 => fn() => $this->semValue = new Node\InterpolatedStringPartNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			276 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			282, 283 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			284 => fn() => $this->semValue = new Expression\ArrayAccessNode($this->semStack[$pos - 4], $this->semStack[$pos - 2], $this->startTokenStack[$pos - 5]->position),
			287 => fn() => $this->semValue = TagParser::parseOffset($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			288 => fn() => $this->semValue = TagParser::parseOffset('-' . $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
		})();
	}
}
